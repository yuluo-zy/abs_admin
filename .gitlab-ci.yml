# This file is a template, and might need editing before it works on your project.
# This is a sample GitLab CI/CD configuration file that should run without any modifications.
# It demonstrates a basic 3 stage CI/CD pipeline. Instead of real tests or scripts,
# it uses echo commands to simulate the pipeline execution.
#
# A pipeline is composed of independent jobs that run scripts, grouped into stages.
# Stages run in sequential order, but jobs within stages run in parallel.
#
# For more information, see: https://docs.gitlab.com/ee/ci/yaml/README.html#stages

stages:
  - npm
  - build
  - push
  - deploy-dev
  - deploy

# user pipeline id as the version of container image
variables:
  TAG: 1.0.$CI_PIPELINE_ID
  ENV: "dev"
  GIT_URL: xsystem.espressif.cn/IT/k8s-custom-frontend.git

workflow:
  rules:
    - if: $CI_COMMIT_REF_NAME == "dev"
      variables:
        ENV: "dev"
    - if: $CI_COMMIT_REF_NAME == "qa"
      variables:
        ENV: "qa"
    - if: $CI_COMMIT_REF_NAME == "master"
      variables:
        ENV: "prod"
    - when: always

npm:
  stage: npm
  image: node:16
  # Cache modules in between jobs
  cache:
    key: $CI_COMMIT_REF_SLUG
    paths:
      - .npm/
  before_script:
    - npm ci --cache .npm --prefer-offline
  script:
    - npm run build
  artifacts:
    paths:
      - build/*
  only:
    - main
    - dev
    - qa
    - master
# build container image
docker_build:
  stage: build
  dependencies:
    - npm
  script:
    - echo $ENV
    - docker build -t ${REGISTRY}/${REGISTRY_PATH}/${APP_NAME}/${ENV}:${TAG} .
  only:
    - dev
    - main
    - master

# tag the image and push it to registry
push-job:
  stage: push
  script:
    - docker login $REGISTRY -u$DOCKER_USERNAME -p$DOCKER_PASSWORD
    - docker push ${REGISTRY}/${REGISTRY_PATH}/${APP_NAME}/${ENV}:${TAG}
    - docker rmi ${REGISTRY}/${REGISTRY_PATH}/${APP_NAME}/${ENV}:${TAG}
  only:
    - dev
    - main
    - master

# dev can cd automatically
deploy-dev:
  stage: deploy-dev
  image: cnych/kustomize:v1.0
  before_script:
    - mkdir /k8s-config
    - cd /k8s-config
    - git init
    - git clone https://${GIT_USERNAME}:${GIT_PASSWORD}@$GIT_URL
    - git remote add origin https://${GIT_USERNAME}:${GIT_PASSWORD}@$GIT_URL
    - git config --global user.email "bot@espressif.com"
    - git config --global user.name "bot"
  script:
    - git checkout -B master
    - git pull origin master
    - cd overlays/${ENV}
    - kustomize edit set image ${REGISTRY}/${REGISTRY_PATH}/${APP_NAME}/${ENV}:${TAG}
    - cat kustomization.yaml
    - echo $CI_COMMIT_MESSAGE
    - git commit -am "${CI_COMMIT_MESSAGE}"
    - git push origin master
  only:
    - main

# prod or sit should cd manually
deploy:
  stage: deploy
  image: cnych/kustomize:v1.0
  before_script:
    - mkdir /k8s-config
    - cd /k8s-config
    - git init
    - git clone https://${GIT_USERNAME}:${GIT_PASSWORD}@$GIT_URL
    - git remote add origin https://${GIT_USERNAME}:${GIT_PASSWORD}@$GIT_URL
    - git config --global user.email "bot@espressif.com"
    - git config --global user.name "bot"
  script:
    - git checkout -B master
    - git pull origin master
    - cd overlays/${ENV}
    - kustomize edit set image ${REGISTRY}/${REGISTRY_PATH}/${APP_NAME}/${ENV}:${TAG}
    - cat kustomization.yaml
    - git commit -am "${CI_COMMIT_MESSAGE}"
    - git push origin master
  only:
    - qa
    - master
  when: manual
